// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id                String            @default(uuid())                    @id
  email             String            @unique()
  nickname          String            @unique()
  profileImage      userProfileImage?  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  board             board[]
  boardLike         boardLike[]
  comment           comment[]
  commentLike       commentLike[]
  roomChat          roomChat[]
  sendDM            DM[]              @relation("sendDM")
  recevieDM         DM[]              @relation("receiveDM")
  DMRoomMember      DMRoomMember[]
}

model userProfileImage {
  id                Int               @id @default(autoincrement())
  url               String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  userId            String?           @unique
  user              user?             @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model board {
  id                Int               @default(autoincrement())          @id
  title             String        
  content           String        
  published         Boolean           @default(true)
  views             Int               @default(0)
  likeCount         Int               @default(0)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  userId            String
  user              user              @relation(fields: [userId], references: [id])
  categoryId        Int
  boardCategory     boardCategory     @relation(fields: [categoryId], references: [id])

  boardLike         boardLike[]
  FileUpload        boardFileUpload[]
  comment           comment[]

  @@fulltext([title])
  @@fulltext([content])
  @@fulltext([content, title])
}

model boardFileUpload {
  id                Int               @id @default(autoincrement())
  url               String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  boardId           Int?
  board             board?            @relation(fields: [boardId], references: [id], onDelete: Cascade)
}

model boardLike {
  userId            String
  boardId           Int
  user              user              @relation(fields: [userId], references: [id], onDelete: Cascade)
  board             board             @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@id([userId, boardId])
}

model boardCategory {
  id                Int               @default(autoincrement())          @id
  name              String
  parentCategory    Int?
  innerCategory     boardCategory?    @relation("boardCategory", fields: [parentCategory], references: [id], onDelete: Cascade)

  board             board[]
  boardCategory     boardCategory[]   @relation("boardCategory")
}

model comment {
  id                Int               @default(autoincrement())          @id
  content           String        
  createdAt         DateTime          @default(now())
  likeCount         Int               @default(0)
  userId            String
  user              user              @relation(fields: [userId], references: [id], onDelete: Cascade)
  boardId           Int
  board             board             @relation(fields: [boardId], references: [id], onDelete: Cascade)
  parentComment     Int?
  reComment         comment?          @relation("comment", fields: [parentComment], references: [id], onDelete: Cascade)

  comment           comment[]         @relation("comment")
  commentLike       commentLike[]
}

model commentLike {
  userId            String
  commentId         Int
  user              user              @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment           comment           @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([userId, commentId])
}

model room {
  id                Int               @default(autoincrement())          @id
  name              String

  roomChat          roomChat[]
}

model roomChat {
  id                Int               @default(autoincrement())          @id
  userId            String
  roomId            Int
  content           String
  createdAt         DateTime          @default(now())
  user              user              @relation(fields: [userId], references: [id])
  room              room              @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model DM {
  id                Int               @default(autoincrement())          @id
  content           String
  createdAt         DateTime          @default(now())
  senderId          String
  receiverId        String
  DMRoomId          Int
  sendUser          user              @relation("sendDM", fields: [senderId], references: [id])
  receiveUser       user              @relation("receiveDM", fields: [receiverId], references: [id])
  DMRoom            DMRoom            @relation(fields: [DMRoomId], references: [id])
}

model DMRoom {
  id                Int               @default(autoincrement())          @id

  DMRoomMember      DMRoomMember[]
  DM                DM[]
}

model DMRoomMember {
  userId            String
  DMRoomId          Int
  user              user              @relation(fields: [userId], references: [id], onDelete: Cascade)
  DMRoom            DMRoom            @relation(fields: [DMRoomId], references: [id], onDelete: Cascade)

  @@id([userId, DMRoomId])
}